name: 'Generate Envs'
description: 'Generate Envs from AssemblyInfo'

inputs:
  app:
    required: true
    description: "App Name"
  dotnet-version:
    description: 'Dotnet Version'
    default: "6.0.x"
  nuget-api-url:
    description: "NuGet URL"
  nuget-api-key:
    description: 'NuGet API key'
  image-prefix:
    description: "full image name, ex: [image-prefix]/[image]"
  branch-production:
    description: "Production Branch"
    default: "main"
outputs:
  app:
    description: "App Name"
    value: ${{ steps.envs.outputs.app }}
  version:
    description: "App Version from AssemblyInfo"
    value: ${{ steps.envs.outputs.version }}
  image:
    description: "Image Name"
    value: ${{ steps.envs.outputs.image }}
  image-fullName:
    description: "Image Full Name"
    value: ${{ steps.envs.outputs.image-fullName }}
  tag:
    description: "Image Tag"
    value: ${{ steps.envs.outputs.tag }}
  tag-hash:
    description: "Image Tag with hash"
    value: ${{ steps.envs.outputs.tag-hash }}
  tag-latest:
    description: "Image Tag with latest"
    value: ${{ steps.envs.outputs.tag-latest }}
  build-options:
    description: "Image build options"
    value: ${{ steps.envs.outputs.build-options }}
  branch:
    description: "Branch name"
    value: ${{ steps.envs.outputs.branch }}
  actor:
    description: "Actor"
    value: ${{ steps.envs.outputs.actor }}
  email:
    description: "Email"
    value: ${{ steps.envs.outputs.email }}

runs:
  using: "composite"
  steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ inputs.dotnet-version }}
    - name: Add NuGet Source
      shell: bash
      if: inputs.nuget-api-url != '' && inputs.nuget-api-key != ''
      run: dotnet nuget add source --username USERNAME --password ${{ inputs.nuget-api-key }} --store-password-in-clear-text --name nuget-${{ github.run_id }} "${{ inputs.nuget-api-url }}"
    - name: Install dotnet tool
      shell: bash
      run: dotnet tool install -g --prerelease netcorext.tools.assemblyinfo
    - name: Set Environments
      id: envs
      shell: bash
      run: |
        APP="${{ inputs.app }}"
        BRANCH=`echo "${GITHUB_REF_NAME,,}" | sed 's/\//-/g'`
        IMAGE=`echo "${APP,,}" | sed 's/\./-/g'`
        IMAGE_FULL_NAME=$IMAGE

        if [ ! -z "${{ inputs.image-prefix }}" ]; then
          IMAGE_FULL_NAME="${{ inputs.image-prefix }}/${IMAGE}"
        fi

        COMMIT_SHORT_SHA=`git rev-parse --short ${GITHUB_SHA}`
        COMMIT_COUNT=`git rev-list --count HEAD`
        COMMIT_TIME=`git show -s --format=%ct HEAD`
        ADDITIONAL_ARGUMENTS="-c Debug --version-suffix ${BRANCH}.${COMMIT_TIME}+${COMMIT_SHORT_SHA}"
        TAG_LATEST="${BRANCH}-latest"
        USERNAME=`git log -n 1 --pretty=format:%an`
        EMAIL=`git log -n 1 --pretty=format:%ae`

        PROJECT_PATH=`find . -type f -iname "${APP}.csproj"`

        BRANCH=$BRANCH dotnet build $PROJECT_PATH -o ./dist

        echo "asm-info ./dist/${APP}.dll --simple --version"

        ASSEMBLY_VERSION=`asm-info ./dist/${APP}.dll --simple --version`

        rm -rf ./dist

        TAG="${ASSEMBLY_VERSION}-${BRANCH}.${COMMIT_TIME}"

        if [ "$GITHUB_REF_NAME" = "${{ inputs.branch-production }}" ]; then
          ADDITIONAL_ARGUMENTS="-c Release"
          TAG="${ASSEMBLY_VERSION}.${COMMIT_TIME}"
          TAG_LATEST="latest"
        fi

        echo "app=$APP" >> $GITHUB_OUTPUT
        echo "version=$ASSEMBLY_VERSION" >> $GITHUB_OUTPUT
        echo "image=$IMAGE" >> $GITHUB_OUTPUT
        echo "image-fullName=$IMAGE_FULL_NAME" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "tag-hash=$COMMIT_SHORT_SHA" >> $GITHUB_OUTPUT
        echo "tag-latest=$TAG_LATEST" >> $GITHUB_OUTPUT
        echo "build-options=$ADDITIONAL_ARGUMENTS" >> $GITHUB_OUTPUT
        echo "branch=$BRANCH" >> $GITHUB_OUTPUT
        echo "actor=$USERNAME" >> $GITHUB_OUTPUT
        echo "email=$EMAIL" >> $GITHUB_OUTPUT
